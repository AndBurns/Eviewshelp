%begin_temp = @str(@val(%begin_date)-1)

wfcreate a %begin_temp %end_date 

model {%model}

'***************************************************
' DATA IMPORT
'***************************************************
	cd %extractpath
	for %SHEET bgddataforupdate external commodities
		read(t=xls,B1,s={%SHEET},t) {%cty}dataforupdateNOV2022.xls 400
		logmsg read data {%SHEET} done
	next
STOP	
	delete ser*
	delete(noerr) PUBLIC_DEBT__MILLIONS_OF_CURRENT_LCU_ GOVERNMENT_FINANCING__MILLIONS_OF_CURRENT_LCU_ EXTERNAL_VARIABLES EXCHANGE_RATE POPULATION BALANCE_OF_PAYMENTS__MILLIONS_OF_CURRENT_USD_ BALANCE_OF_PAYMENTS_CAPITAL_FLOWS__MILLIONS_OF_CURRENT_USD_ GDP__NOMINAL__USD_ GDP_EXPENDITURE_SIDE_VALUES__MILLIONS_OF_CURRENT_LCU_ GDP_EXPENDITURE_SIDE_VOLUME__MILLIONS_OF_CONSTANT_LCU_ GDP_PRODUCTION_SIDE_VALUES__MILLIONS_OF_CURRENT_LCU_ GDP_PRODUCTION_SIDE_VOLUME__MILLIONS_OF_CONSTANT_LCU_ CONSUMPTION_PRICES CONSUMER_PRICE_INDEX FISCAL_ACCOUNTS__MILLIONS_OF_CURRENT_LCU_ IMPORTS__VOLUME_ LCU_USD_EXCHANGE_RATE LABOR_MARKET MONEY_MARKET 

	pagestruct(start=%begin_date)

'***************************************************
' CONSTRUCT ADDITIONAL VARIABLES
'***************************************************
'********************
'Create dummies
'********************
	series DUMH = 1
	series T_LR = @TREND
	series {%cty}NYYWBTOTLCN_ = 0.7
	
'********************
'NIA
'********************
	'GDP definitions and dollar conversions
		series BGDNYGDPMKTPCD  = BGDNYGDPMKTPCN  / BGDPANUSATLS
		series BGDGDPPCKN  = (BGDNYGDPMKTPKN  / BGDSPPOPTOTL)

		series BGDNYGDPMKTPKD  = (BGDNYGDPMKTPKN  * (@ELEM(BGDNYGDPMKTPCN  , 2015)  / (@ELEM(BGDNYGDPMKTPKN  , 2015))))  / @ELEM(BGDPANUSATLS  , 2015)

		series BGDGDPPCKD  = (BGDNYGDPMKTPKD  / BGDSPPOPTOTL)

		series BGDNYGDPMKTPXD  = (BGDNYGDPMKTPCD  / BGDNYGDPMKTPKD)

		series BGDNEEXPGNFSCD  = BGDNEEXPGNFSCN  / BGDPANUSATLS
		series BGDNEIMPGNFSCD  = BGDNEIMPGNFSCN  / BGDPANUSATLS

		series BGDNEEXPGNFSKD  = (BGDNEEXPGNFSKN  * (@ELEM(BGDNEEXPGNFSCN  , 2015)  / (@ELEM(BGDNEEXPGNFSKN  , 2015))))  / @ELEM(BGDPANUSATLS  , 2015)
		series BGDNEIMPGNFSKD  = (BGDNEIMPGNFSKN  * (@ELEM(BGDNEIMPGNFSCN  , 2015)  / (@ELEM(BGDNEIMPGNFSKN  , 2015))))  / @ELEM(BGDPANUSATLS  , 2015)

		series BGDNEEXPGNFSXD  = (BGDNEEXPGNFSCD  / BGDNEEXPGNFSKD)
		series BGDNEIMPGNFSXD  = (BGDNEIMPGNFSCD  / BGDNEIMPGNFSKD)

	'Discrepancy
		series  BGDNYGDPDISCCN = BGDNYGDPMKTPCN  - (BGDNECONPRVTCN  + BGDNECONGOVTCN  + BGDNEGDIFTOTCN  + BGDNEGDISTKBCN + BGDNEEXPGNFSCN - BGDNEIMPGNFSCN)
		series  BGDNYGDPDISCKN = BGDNYGDPMKTPKN  - (BGDNECONPRVTKN  + BGDNECONGOVTKN  + BGDNEGDIFTOTKN  + BGDNEGDISTKBKN + BGDNEEXPGNFSKN - BGDNEIMPGNFSKN)

	'Domestic demand
		series BGDNEGDETTOTKN  = (BGDNECONPRVTKN  + BGDNECONGOVTKN  + BGDNEGDIFTOTKN  + BGDNEGDISTKBKN  + BGDNYGDPDISCKN)
		series BGDNEGDETTOTCN  = (BGDNECONPRVTCN  + BGDNECONGOVTCN  + BGDNEGDIFTOTCN  + BGDNEGDISTKBCN  + BGDNYGDPDISCCN)
		series BGDNEGDETTOTCD  = BGDNEGDETTOTCN  / BGDPANUSATLS
		
	'Reconstructed labor income
		series BGDNYYWBTOTLCN = BGDNYYWBTOTLCN_ * BGDNYGDPMKTPCN

'********************
'Deflators
'********************
	for %b NYGDPMKTP NECONPRVT NECONGOVT NEGDIFTOT NEGDIFGOV NEGDIFPRV NEGDISTKB NEEXPGNFS NEIMPGNFS NYGDPFCST NVAGRTOTL NVINDTOTL NVSRVTOTL NEGDETTOT NVAGRCROP NVAGRFARM NVAGRFRST NVAGRFISH NVINDMINQ NVINDLSCL NVINDSSCL NVINDELEC NVINDCONS NVSRVRETL NVSRVHOTL NVSRVTRNS NVSRVFINA NVSRVBUSI NVSRVPADM NVSRVEDUC NVSRVHLTH NVSRVSOCL
		series {%cty}{%b}XN = {%cty}{%b}CN/{%cty}{%b}KN
	next
	
	' series BGDINFLEXPT = @movav(@PC(BGDNECONPRVTXN),3)
	' ' smpl 1998 %forecast_end
	' smpl 1994 %forecast_end
	' BGDINFLEXPT = 5
	
	pagestruct(end=%forecast_end)
	series tempinfl = @PC(BGDNYGDPFCSTXN)
	smpl %end_date+1 %forecast_end
		tempinfl = 5.5
	smpl @all
		tempinfl.hpf(100) tempinfl_sm
		series BGDINFLEXPT = tempinfl_sm
	smpl 2020 %forecast_end
		BGDINFLEXPT = 5.5
	smpl @all
	' pagestruct(end=%end_date)
	
'********************
' External proxies
'********************
	for %c BGD USA DEU GBR FRA CHN ESP CAN ITA TUR NLD BEL IND
		series {%c}EXR05  = {%c}PANUSATLS  / @ELEM({%c}PANUSATLS  , 2015)
		series {%c}PCEXN05  = {%c}NECONPRVTXN  / @ELEM({%c}NECONPRVTXN  , 2015)
	next
 
	series BGDNEER = 100  * (0.1976357385 * 1 / (BGDEXR05 / USAEXR05)  + 0.1462581536 * 1 / (BGDEXR05 / DEUEXR05)  + 0.08439290517 * 1 / (BGDEXR05 / GBREXR05)  + 0.06887154717 * 1 / (BGDEXR05 / FRAEXR05)  + 0.04927114879 * 1 / (BGDEXR05 / CHNEXR05)  + 0.04496640064 * 1 / (BGDEXR05 / ESPEXR05)  + 0.03717605296 * 1 / (BGDEXR05 / CANEXR05)  + 0.03359022571 * 1 / (BGDEXR05 / ITAEXR05)  + 0.03241757735 * 1 / (BGDEXR05 / TUREXR05)  + 0.02752241922 * 1 / (BGDEXR05 / NLDEXR05)  + 0.0260141169 * 1 / (BGDEXR05 / BELEXR05)  + 0.02484860441 * 1 / (BGDEXR05 / INDEXR05)) / (1-0.22703511)

	series BGDREER  = 100  * (0.1976357385 * 1 / ((BGDEXR05 / BGDPCEXN05) / (USAEXR05 / USAPCEXN05))  + 0.1462581536 * 1 / ((BGDEXR05 / BGDPCEXN05) / (DEUEXR05 / DEUPCEXN05))  + 0.08439290517 * 1 / ((BGDEXR05 / BGDPCEXN05) / (GBREXR05 / GBRPCEXN05))  + 0.06887154717 * 1 / ((BGDEXR05 / BGDPCEXN05) / (FRAEXR05 / FRAPCEXN05))  + 0.04927114879 * 1 / ((BGDEXR05 / BGDPCEXN05) / (CHNEXR05 / CHNPCEXN05))  + 0.04496640064 * 1 / ((BGDEXR05 / BGDPCEXN05) / (ESPEXR05 / ESPPCEXN05))  + 0.03717605296 * 1 / ((BGDEXR05 / BGDPCEXN05) / (CANEXR05 / CANPCEXN05))  + 0.03359022571 * 1 / ((BGDEXR05 / BGDPCEXN05) / (ITAEXR05 / ITAPCEXN05))  + 0.03241757735 * 1 / ((BGDEXR05 / BGDPCEXN05) / (TUREXR05 / TURPCEXN05))  + 0.02752241922 * 1 / ((BGDEXR05 / BGDPCEXN05) / (NLDEXR05 / NLDPCEXN05))  + 0.0260141169 * 1 / ((BGDEXR05 / BGDPCEXN05) / (BELEXR05 / BELPCEXN05))  + 0.02484860441 * 1 / ((BGDEXR05 / BGDPCEXN05) / (INDEXR05 / INDPCEXN05))) / (1-0.22703511) 

	series ROWNEIMPGNFSKD = WLTNEIMPGNFSKD - (USAneimpgnfskd + DEUneimpgnfskd + GBRneimpgnfskd + FRAneimpgnfskd + CHNneimpgnfskd + ESPneimpgnfskd + CANneimpgnfskd + ITAneimpgnfskd + TURneimpgnfskd + NLDneimpgnfskd + BELneimpgnfskd + INDneimpgnfskd)
	
	series BGDXMKT_GR  = 0.1976357385 * @pc(USAneimpgnfskd) + 0.1462581536 * @pc(DEUneimpgnfskd) + 0.08439290517 * @pc(GBRneimpgnfskd) + 0.06887154717 * @pc(FRAneimpgnfskd) + 0.04927114879 * @pc(CHNneimpgnfskd) + 0.04496640064 * @pc(ESPneimpgnfskd) + 0.03717605296 * @pc(CANneimpgnfskd) + 0.03359022571 * @pc(ITAneimpgnfskd) + 0.03241757735 * @pc(TURneimpgnfskd) + 0.02752241922 * @pc(NLDneimpgnfskd) + 0.0260141169 * @pc(BELneimpgnfskd) + 0.02484860441 * @pc(INDneimpgnfskd) + 0.22703511 * @pc(ROWNEIMPGNFSKD)

	smpl 1980 1980
	series BGDXMKT = 1

	smpl 1981 %end_date
	series BGDXMKT  = BGDXMKT(-1)  * (1  + BGDXMKT_GR  / 100)
	smpl @all

	series BGDXMKT = BGDXMKT/@elem(BGDXMKT,"2015") * @elem(BGDNEEXPGNFSKD,"2015")

	series BGDPXKEY  = MUV / @ELEM(MUV , 2015)

	series BGDPMKEY  = ( 0.002452542217  * WLDFALUMINUM  / @ELEM(WLDFALUMINUM  , 2015)  + 0.000027200099  * WLDFBANANA_US  / @ELEM(WLDFBANANA_US  , 2015)  + 0.003404545665  * WLDFBEEF  / @ELEM(WLDFBEEF  , 2015)  + 0.247806497590  * WLDFCOAL_AUS  / @ELEM(WLDFCOAL_AUS  , 2015)  + 0.000497856374  * WLDFCOCOA  / @ELEM(WLDFCOCOA  , 2015)  + 0.000380801379  * WLDFCOFFEE_COMPO  / @ELEM(WLDFCOFFEE_COMPO  , 2015)  + 0.000013600049  * WLDFCOPPER  / @ELEM(WLDFCOPPER  , 2015)  + 3.512983391193  * WLDFCOTTON_A_INDX  / @ELEM(WLDFCOTTON_A_INDX  , 2015)  + 0.000376692145  * WLDFCRUDE_PETRO  / @ELEM(WLDFCRUDE_PETRO  , 2015)  + 0.000026202967  * WLDFGRNUT_OIL  / @ELEM(WLDFGRNUT_OIL  , 2015)  + 0.000412534828  * WLDFGRNUT_OIL  / @ELEM(WLDFGRNUT_OIL  , 2015)  + 0.001156004187  * WLDFGOLD  / @ELEM(WLDFGOLD  , 2015)  + 0.000072533596  * WLDFGRNUT  / @ELEM(WLDFGRNUT  , 2015)  + 0.000009066700  * WLDFIRON_ORE  / @ELEM(WLDFIRON_ORE  , 2015)  + 0.010453207011  * WLDFLEAD  / @ELEM(WLDFLEAD  , 2015)  + 0.708186298485  * WLDFMAIZE  / @ELEM(WLDFMAIZE  , 2015)  + 79.964617643237  * MUV  / @ELEM(MUV  , 2015)  + 0.000213458882  * WLDFNICKEL  / @ELEM(WLDFNICKEL  , 2015)  + 0.205605544733  * WLDFORANGE  / @ELEM(WLDFORANGE  , 2015)  + 0.097435286258  * WLDFNGAS_EUR  / @ELEM(WLDFNGAS_EUR  , 2015)  + 0.064586633942  * WLDFPALM_OIL  / @ELEM(WLDFPALM_OIL  , 2015)  + 1.455917006872  * WLDFRICE_05  / @ELEM(WLDFRICE_05  , 2015)  + 0.025930760592  * WLDFRUBBER1_MYSG  / @ELEM(WLDFRUBBER1_MYSG  , 2015)  + 0.000285601034  * WLDFSILVER  / @ELEM(WLDFSILVER  , 2015)  + 1.293541485392  * WLDFSOYBEAN_MEAL  / @ELEM(WLDFSOYBEAN_MEAL  , 2015)  + 0.822399512182  * WLDFSOYBEAN_OIL  / @ELEM(WLDFSOYBEAN_OIL  , 2015)  + 0.207065283353  * WLDFSOYBEANS  / @ELEM(WLDFSOYBEANS  , 2015)  + 0.000235734187  * WLDFSORGHUM  / @ELEM(WLDFSORGHUM  , 2015)  + 5.530605099306  * WLDFISTL_JP_INDX  / @ELEM(WLDFISTL_JP_INDX  , 2015)  + 2.081016071070  * WLDFSUGAR_WLD  / @ELEM(WLDFSUGAR_WLD  , 2015)  + 0.019806205074  * WLDFTEA_AVG  / @ELEM(WLDFTEA_AVG  , 2015)  + 0.043860158868  * WLDFTOBAC_US  / @ELEM(WLDFTOBAC_US  , 2015)  + 0.000022666749  * WLDFLOGS_MYS  / @ELEM(WLDFLOGS_MYS  , 2015)  + 0.044154826602  * WLDFPLYWOOD  / @ELEM(WLDFPLYWOOD  , 2015)  + 0.001310148353  * WLDFWOODPULP  / @ELEM(WLDFWOODPULP  , 2015)  + 0.250716908132  * WLDFSAWNWD_MYS  / @ELEM(WLDFSAWNWD_MYS  , 2015)  + 3.402414990698  * WLDFWHEAT_US_HRW  / @ELEM(WLDFWHEAT_US_HRW  , 2015) )  / 100
	
	series BGDTOT  = (BGDNEEXPGNFSXN  / BGDNEIMPGNFSXN)
	
'********************
'Capital stock
'********************
	series myear=@year
	!stDate1=@ifirst({%cty}NEGDIFTOTKN)
	%stDate=@str(myear(!stDate1))

	smpl @all
	series {%cty}depr = 5

	smpl %stDate %end_date
	series {%cty}NEGDIKSTKKN_temp = NA

	smpl %stDate %stDate
	series  {%cty}NEGDIKSTKKN_temp = {%cty}NEGDIFTOTKN
	smpl %stDate+1 %end_date
	series  {%cty}NEGDIKSTKKN_temp = {%cty}NEGDIKSTKKN_temp(-1)*(1-{%cty}DEPR/100) + {%cty}NEGDIFTOTKN

	smpl %stDate %end_date
	scalar {%cty}ratio_scalar={%cty}NEGDIKSTKKN_temp(@ifirst({%cty}NEGDIKSTKKN_temp)+15)/{%cty}NYGDPMKTPKN(@ifirst({%cty}NEGDIKSTKKN_temp)+15)
	series {%cty}ratio={%cty}ratio_scalar

	smpl %stDate %end_date
	series {%cty}NEGDIKSTKKN = na

	smpl %stDate %stDate
	series  {%cty}NEGDIKSTKKN = {%cty}ratio*{%cty}NYGDPMKTPKN
	smpl %stDate+1 %end_date
	series  {%cty}NEGDIKSTKKN = {%cty}NEGDIKSTKKN(-1)*(1-{%cty}DEPR/100) + {%cty}NEGDIFTOTKN
	

'********************
'STRUCTURAL EMPLOYMENT
'********************	
	series {%cty}NYWRTTOTLXN = {%cty}NYYWBTOTLCN/{%cty}LMEMPTOTL ' Total wage rate
	series {%cty}LMPRTTOTL_ = ({%cty}LMEMPTOTL/({%cty}SPPOP1564TO*(1-{%cty}LMUNRTOTL_/100)))*100 ' Labor participation rate
	{%cty}LMUNRTOTL_.hpf(100) {%cty}LMUNRSTRL_ ' Structural unemployment rate
	{%cty}LMPRTTOTL_.hpf(100) {%cty}LMPRTSTRL_ ' Structural participation rate
	series {%cty}LMEMPSTRL = (1-{%cty}LMUNRSTRL_/100)*({%cty}LMPRTSTRL_/100)*{%cty}SPPOP1564TO ' Structural employment



'********************
'TFP
'********************
	pagestruct(end=%template_end)
	smpl @all

	series {%cty}NYGDPTFP_raw = ({%cty}NYGDPMKTPKN) / ({%cty}LMEMPSTRL^BGDNYYWBTOTLCN_*BGDNEGDIKSTKKN(-1)^(1-BGDNYYWBTOTLCN_))

	%ser = %cty+"NYGDPTFP_raw"
	smpl @all
	series temp = @recode({%ser}<>na,@trend,na)+1 
	scalar first = @min(temp)
	scalar last = @max(temp)
	%firstdate=@otod(first)
	%lastdate=@otod(last) 

	smpl %end_date_interface @last
	' smpl %end_date+1 @last
	series {%cty}NYGDPTFP_raw ={%cty}NYGDPTFP_raw(-1)*(1+(((@elem({%cty}NYGDPTFP_raw,"2018")/@elem({%cty}NYGDPTFP_raw,"2008"))^(1/10)-1)))

	smpl @all
	hpf(100) {%cty}NYGDPTFP_raw {%cty}NYGDPTFP
	pagestruct(end=%template_end)

	series BGDNYGDPPOTLKN  = (BGDNYGDPTFP  * {%cty}LMEMPSTRL^BGDNYYWBTOTLCN_  * BGDNEGDIKSTKKN(-1)^(1-BGDNYYWBTOTLCN_))
	
	series BGDNYGDPPOTLKD  = (BGDNYGDPPOTLKN  * (@elem(BGDNYGDPMKTPCN  , 2015)  / (@elem(BGDNYGDPMKTPKN  , 2015))))  / @elem(BGDpanusatls  , 2015)

	series BGDNYGDPGAP_  = (BGDNYGDPMKTPKN  / BGDNYGDPPOTLKN  - 1)  * 100

	delete {%cty}NYGDPTFP_raw {%cty}NEGDIKSTKKN_temp temp
	smpl @all
	
'********************
'FISCAL
'********************
'Revenues
	series BGDGGREVDRCTER = BGDGGREVDRCTCN / BGDNYGDPMKTPCN * 100
	series BGDGGREVTVATER = BGDGGREVTVATCN / (BGDNECONPRVTCN + BGDNECONGOVTCN) * 100
	series BGDGGREVIMPDER = BGDGGREVIMPDCN / BGDNEIMPGNFSCN * 100
	series BGDGGREVEXPDER = BGDGGREVEXPDCN / BGDNEEXPGNFSCN * 100
	series BGDGGREVEXCDER = BGDGGREVEXCDCN / (BGDNECONPRVTCN + BGDNECONGOVTCN) * 100
	series BGDGGREVSUPDER = BGDGGREVSUPDCN / (BGDNECONPRVTCN + BGDNECONGOVTCN) * 100
	series BGDGGREVOTHDER = BGDGGREVOTHDCN / BGDNYGDPMKTPCN * 100
	series BGDGGREVNNBRER = BGDGGREVNNBRCN / BGDNYGDPMKTPCN * 100
	
	series BGDGGREVTOTHER = BGDGGREVTOTHCN / BGDNYGDPMKTPCN * 100
	
	'Tax rates retropolation for estimation of price equations
		smpl 1995 2008
			series BGDGGREVDRCTER = @ELEM(BGDGGREVDRCTER,"2009")
			series BGDGGREVTVATER = @ELEM(BGDGGREVTVATER,"2009")
			series BGDGGREVIMPDER = @ELEM(BGDGGREVIMPDER,"2009")
			series BGDGGREVEXPDER = @ELEM(BGDGGREVEXPDER,"2009")
			series BGDGGREVEXCDER = @ELEM(BGDGGREVEXCDER,"2009")		
		smpl @all
		
'Expenditures
	series BGDINTRDFR = BGDGGEXPINTDCN / BGDGGDBTDOMTCN(-1) * 100
	series BGDINTREFR = BGDGGEXPINTECN / BGDGGDBTEXTLCN(-1) * 100
	
	series BGDINTRDDIFFFR = BGDINTRDFR - BGDFMLBLPOLYFR 
	series BGDINTREDIFFFR = BGDINTREFR - USAINTRFR
	
	series BGDBFCAFFFDICN = BGDBFCAFFFDICD * BGDPANUSATLS
	
	'Dynamic coverage ratio of fiscal to NIA accounts
		series BGDNECONGOVTCOV_ = BGDNECONGOVTCN(-1) / (BGDGGEXPGNFSCN(-1) + BGDGGEXPWAGECN(-1)) * 100
		series BGDNEGDIFGOVCOV_ = BGDNEGDIFGOVCN(-1) / (BGDGGEXPCAPTCN(-1)) * 100

'Balance
	series BGDGGBALOVRLCN_ = BGDGGBALOVRLCN  / BGDNYGDPMKTPCN  * 100

	series BGDGGBALOVRLCD = BGDGGBALOVRLCN  / BGDPANUSATLS
	series BGDGGBALOVRLCD_ = BGDGGBALOVRLCD  / BGDNYGDPMKTPCD  * 100
	series BGDGGDBTTOTLCD = (BGDGGDBTTOTLCN  / BGDPANUSATLS)
	
'Debt
	series BGDGGDBTTOTLCD = BGDGGDBTTOTLCN / BGDPANUSATLS
	
'Financing
	series BGDGGFINREQMCN = - BGDGGBALOVRLCN
	
	series BGDGGDBTVALECN = BGDGGDBTEXTLCN - (BGDGGDBTEXTLCN(-1) + BGDGGFINEXTLCN)
	series BGDGGDBTVALDCN = BGDGGDBTDOMTCN - (BGDGGDBTDOMTCN(-1) + BGDGGFINDOMTCN)
	series BGDGGFINEXTLSHARE_ = BGDGGFINEXTLCN / BGDGGFINTOTLCN * 100
	
'********************
'BOP and EXTERNAL
'********************
	series BGDBXGSRGNFSCD = BGDBXGSRMRCHCD + BGDBXGSRNFSVCD
	series BGDBMGSRGNFSCD = BGDBMGSRMRCHCD + BGDBMGSRNFSVCD
	
	series BGDBNFSTCABTCD = BGDBXFSTCABTCD - BGDBMFSTCABTCD
	
	series BGDBNGSRGNFSCD = BGDBXGSRGNFSCD - BGDBMGSRGNFSCD
	
	series BGDBXFSTOTHRCD = BGDBXFSTCABTCD - BGDBXFSTREMTCD
	
	series BGDBMFSTINTECD = BGDGGEXPINTECN / BGDPANUSATLS
	series BGDBMFSTOTHRCD = BGDBMFSTCABTCD - (BGDBMFSTREMTCD + BGDBMFSTINTECD)
	
	series BGDBFFINAGOVCD = BGDGGFINEAMTCN / BGDPANUSATLS
	series BGDBFFINDGOVCD = BGDGGFINEDSBCN / BGDPANUSATLS
	series BGDBFFINOGOVCD = BGDGGFINEOTHCN / BGDPANUSATLS
	
	series BGDBFFINTGOVCD = BGDBFFINAGOVCD + BGDBFFINDGOVCD + BGDBFFINOGOVCD
	series BGDBFCAFOOTHCD = BGDBFCAFOTHRCD - BGDBFFINTGOVCD
	
	series BGDBFBOPTOTLCD = BGDBFCAFCAPTCD + BGDBFCAFFINXCD + BGDBNCABFUNDCD + BGDBFCAFNEOMCD
	series BGDBFFINFGAPCD = BGDBFBOPTOTLCD + BGDBFCAFRACGCD
	
	smpl 1980 1980
		series BGDREMT_IN = 1

	smpl @all
		series BGDREMT_IN_GR = (0.5051202849 * @pc(INDnygdpmktpcd) + 0.2345741681 * @pc(SAUnygdpmktpcd) + 0.04365722396 * @pc(KWTnygdpmktpcd) + 0.03747056485 * @pc(GBRnygdpmktpcd) + 0.03191225175 * @pc(USAnygdpmktpcd) + 0.02910502448 * @pc(PAKnygdpmktpcd) + 0.02319375545 * @pc(OMNnygdpmktpcd) + 0.02142444069 * @pc(QATnygdpmktpcd) + 0.01919426588 * @pc(MYSnygdpmktpcd) + 0.01281306659 * @pc(ITAnygdpmktpcd)) / (1-0.041534953)

	smpl 1981 %end_date 
		series BGDREMT_IN = BGDREMT_IN(-1) * (1+BGDREMT_IN_GR/100) 'Coefficients are rebalanced to account for the remittances coming from the rest of the world

'********************
'Others
'********************
	series  BGDFMLBLMTWOKN = BGDFMLBLMTWOCN / BGDNECONPRVTXN ' Real money supply
	
	series BGDNEKRTTOTLXN = (1-BGDNYYWBTOTLCN_) * BGDNYGDPMKTPCN / BGDNEGDIKSTKKN(-1)	' Nominal cost of capital
	series BGDNEKRTPREMFR = 100 * BGDNEKRTTOTLXN / BGDNEGDIFTOTXN - (BGDFMLBLPOLYFR + BGDDEPR - BGDINFLEXPT) ' Capital cost premium
	
	series {%cty}PSTAR  = ({%cty}NYWRTTOTLXN^{%cty}NYYWBTOTLCN_  * {%cty}NEKRTTOTLXN^(1  - {%cty}NYYWBTOTLCN_))  / ({%cty}NYGDPTFP  * {%cty}NYYWBTOTLCN_^{%cty}NYYWBTOTLCN_  * (1  - {%cty}NYYWBTOTLCN_)^(1  - {%cty}NYYWBTOTLCN_))
logmsg readdata complete


