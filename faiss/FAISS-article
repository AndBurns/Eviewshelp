{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "27c1fffc-9ca7-4b70-b6aa-643faf449517",
   "metadata": {},
   "source": [
    "# FAISS example from pinecone.com\n",
    "\n",
    "## Set up"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "ddd129f1-f37b-41f6-887e-b4b91ec347ed",
   "metadata": {},
   "outputs": [],
   "source": [
    "# -*- coding: utf-8 -*-\n",
    "\"\"\"\n",
    "Created on Fri Mar  7 11:07:55 2025\n",
    "https://www.pinecone.io/learn/series/faiss/faiss-tutorial/\n",
    "\n",
    "@author: wb268970\n",
    "\"\"\"\n",
    "\n",
    "import requests\n",
    "from io import StringIO\n",
    "import pandas as pd\n",
    "import numpy\n",
    "\n",
    "#The first dataset is in a slightly different format:"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1b763811-980e-4711-a0d3-b14f03295b9c",
   "metadata": {},
   "source": [
    "## Read the example data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "04aa52b5-dba1-472c-80b6-dbabfeb459ff",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "14505"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#%%    \n",
    "res = requests.get('https://raw.githubusercontent.com/brmson/dataset-sts/master/data/sts/sick2014/SICK_train.txt')\n",
    "# create dataframe\n",
    "data = pd.read_csv(StringIO(res.text), sep='\\t')\n",
    "data.head()\n",
    "\n",
    "#%%\n",
    "sentences = data['sentence_A'].tolist()\n",
    "sentences[:5]\n",
    "\n",
    "#%%\n",
    "# we take all samples from both sentence A and B\n",
    "sentences = data['sentence_A'].tolist()\n",
    "sentence_b = data['sentence_B'].tolist()\n",
    "sentences.extend(sentence_b)  # merge them\n",
    "len(set(sentences))  # together we have ~4.5K unique sentences\n",
    "\n",
    "#%% Extend the dbase\n",
    "urls = [\n",
    "    'https://raw.githubusercontent.com/brmson/dataset-sts/master/data/sts/semeval-sts/2012/MSRpar.train.tsv',\n",
    "    'https://raw.githubusercontent.com/brmson/dataset-sts/master/data/sts/semeval-sts/2012/MSRpar.test.tsv',\n",
    "    'https://raw.githubusercontent.com/brmson/dataset-sts/master/data/sts/semeval-sts/2012/OnWN.test.tsv',\n",
    "    'https://raw.githubusercontent.com/brmson/dataset-sts/master/data/sts/semeval-sts/2013/OnWN.test.tsv',\n",
    "    'https://raw.githubusercontent.com/brmson/dataset-sts/master/data/sts/semeval-sts/2014/OnWN.test.tsv',\n",
    "    'https://raw.githubusercontent.com/brmson/dataset-sts/master/data/sts/semeval-sts/2014/images.test.tsv',\n",
    "    'https://raw.githubusercontent.com/brmson/dataset-sts/master/data/sts/semeval-sts/2015/images.test.tsv'\n",
    "]\n",
    "\n",
    "# each of these dataset have the same structure, so we loop through each creating our sentences data\n",
    "for url in urls:\n",
    "    res = requests.get(url)\n",
    "    # extract to dataframe\n",
    "    data = pd.read_csv(StringIO(res.text), sep='\\t', header=None, on_bad_lines='skip')\n",
    "    # add to columns 1 and 2 to sentences list\n",
    "    sentences.extend(data[1].tolist())\n",
    "    sentences.extend(data[2].tolist())\n",
    "    \n",
    "len(set(sentences))    "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2c14ceca-d8a4-49fd-9ab5-023b7f2f661c",
   "metadata": {},
   "source": [
    "## Do the embeddings\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "1be7857f-0c7b-4afb-bbf4-875962519a5c",
   "metadata": {},
   "outputs": [],
   "source": [
    "#%%\n",
    "\n",
    "# remove duplicates and NaN\n",
    "sentences = [word for word in list(set(sentences)) if type(word) is str]\n",
    "\n",
    "from sentence_transformers import SentenceTransformer\n",
    "# initialize sentence transformer model\n",
    "model = SentenceTransformer('bert-base-nli-mean-tokens')\n",
    "# create sentence embeddings\n",
    "sentence_embeddings = model.encode(sentences)\n",
    "sentence_embeddings.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "aa06b979-c14b-474c-b964-4ee54a3b352d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2.2.2\n"
     ]
    }
   ],
   "source": [
    "import pickle\n",
    "with open(\"Embeddings.pkl\", 'wb') as outp:  # Overwrites any existing file.\n",
    "        pickle.dump(sentence_embeddings, outp, pickle.HIGHEST_PROTOCOL)\n",
    "\n",
    "print(numpy.__version__)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bfa6cd7c-bf92-4a9b-8c1c-fbb93898d4e9",
   "metadata": {},
   "source": [
    "## Now we try and do the FAIss stuff"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "039621a2-a806-4e8f-993c-cc4cf86f4e70",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import faiss\n",
    "\n",
    "d = sentence_embeddings.shape[1]\n",
    "d\n",
    "index=faiss.IndexFlatL2(d)\n",
    "index.is_trained"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "8e7c579e-0aff-45c8-b139-c399067f1127",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "14504"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "index.add(sentence_embeddings)\n",
    "index.ntotal"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d5dce6c7-364d-424c-99fd-85ca31354a97",
   "metadata": {},
   "source": [
    "# Our L2 index is created yeah"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "e7a762a4-0789-4458-804c-2e30881f03fb",
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "k = 4\n",
    "xq = model.encode([\"Someone sprints with a football\"])\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8635b571-955f-42b0-b8f0-6bd9524c5acf",
   "metadata": {},
   "source": [
    "do teh search"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "43b7866a-32b9-42bc-9c8f-b1f557637afc",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[ 2873 11411 12120  3473]]\n",
      "CPU times: total: 0 ns\n",
      "Wall time: 18 ms\n"
     ]
    }
   ],
   "source": [
    "%%time\n",
    "D, I = index.search(xq, k)  # search\n",
    "print(I)\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "5bd1d268-9bd5-42d5-8ee3-0c1f0195e7b2",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "14504"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(sentences)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "fd813b6a-fc64-4e4f-8e98-4eb11f6639d4",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['2873: A group of football players is running in the field',\n",
       " '11411: A group of people playing football is running in the field',\n",
       " '12120: Two groups of people are playing football',\n",
       " '3473: A person playing football is running past an official carrying a football']"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "[f'{i}: {sentences[i]}' for i in I[0]]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "66146a1e-2ff9-4b4a-84f6-4e302299997a",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.9"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
